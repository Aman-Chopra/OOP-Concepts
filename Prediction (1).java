/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import matrix.Matrix;
import matrix.NoSquareException;
import regression.MultiLinear;

/**
 *
 * @author aakash
 */
public class Prediction extends javax.swing.JFrame {

    /**
     * Creates new form Prediction
     */
    public Prediction() {
        initComponents();
    }

    Connection con = null;
    Statement st = null;
    ResultSet rs = null;
    boolean s1 = false,s2 = false,s3 = false,s4 = false,s5 = false,s6 = false,s7 = false,s8 = false,s9 = false,s10 = false;
    boolean sym[] = new boolean[10];
    int c = 0;
    String arr[] = new String[10];
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Img_Label = new javax.swing.JLabel();
        Back_Label = new javax.swing.JLabel();
        Predict_Label = new javax.swing.JLabel();
        jCheckBox55 = new javax.swing.JCheckBox();
        jCheckBox56 = new javax.swing.JCheckBox();
        jCheckBox57 = new javax.swing.JCheckBox();
        jCheckBox58 = new javax.swing.JCheckBox();
        jCheckBox59 = new javax.swing.JCheckBox();
        jCheckBox60 = new javax.swing.JCheckBox();
        jCheckBox61 = new javax.swing.JCheckBox();
        jCheckBox62 = new javax.swing.JCheckBox();
        jCheckBox63 = new javax.swing.JCheckBox();
        jCheckBox64 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Img_Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/healthcare-banner.jpg"))); // NOI18N

        Back_Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/back.png"))); // NOI18N
        Back_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                Back_LabelMousePressed(evt);
            }
        });

        Predict_Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/predict.png"))); // NOI18N
        Predict_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                Predict_LabelMousePressed(evt);
            }
        });

        jCheckBox55.setText("jCheckBox55");
        jCheckBox55.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox55ActionPerformed(evt);
            }
        });

        jCheckBox56.setText("jCheckBox56");
        jCheckBox56.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox56ActionPerformed(evt);
            }
        });

        jCheckBox57.setText("jCheckBox57");
        jCheckBox57.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox57ActionPerformed(evt);
            }
        });

        jCheckBox58.setText("jCheckBox58");
        jCheckBox58.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox58ActionPerformed(evt);
            }
        });

        jCheckBox59.setText("jCheckBox59");
        jCheckBox59.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox59ActionPerformed(evt);
            }
        });

        jCheckBox60.setText("jCheckBox60");
        jCheckBox60.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox60ActionPerformed(evt);
            }
        });

        jCheckBox61.setText("jCheckBox61");
        jCheckBox61.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox61ActionPerformed(evt);
            }
        });

        jCheckBox62.setText("jCheckBox62");
        jCheckBox62.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox62ActionPerformed(evt);
            }
        });

        jCheckBox63.setText("jCheckBox63");
        jCheckBox63.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox63ActionPerformed(evt);
            }
        });

        jCheckBox64.setText("jCheckBox64");
        jCheckBox64.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox64ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Img_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(Back_Label))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox59)
                            .addComponent(jCheckBox58)
                            .addComponent(jCheckBox57)
                            .addComponent(jCheckBox56)
                            .addComponent(jCheckBox55))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Predict_Label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox63, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jCheckBox64, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jCheckBox62, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jCheckBox61, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jCheckBox60, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(120, 120, 120))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Img_Label)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox55)
                    .addComponent(jCheckBox60))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox56)
                    .addComponent(jCheckBox61))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox57)
                    .addComponent(jCheckBox62))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox58)
                    .addComponent(jCheckBox63))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox59)
                    .addComponent(jCheckBox64))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Back_Label)
                    .addComponent(Predict_Label))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Back_LabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Back_LabelMousePressed
        Index i = new Index(null);
        i.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_Back_LabelMousePressed

    private void Predict_LabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Predict_LabelMousePressed
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/healthfirst", "root", "abbh07@6718");
            st = con.createStatement();
            String qu = "select Watery_motion,Vomiting,Fever,Dehydration,Nausea,Shivering,Muscle_Pain,Sweating,";
//            qu = qu + "Coughing,Headache,Appetite_Loss,Constipation,Skin_Rashes,Breath_Shortness,Chest_Pain,Fatigue,";
//            qu = qu + "Joint_Pain,Cramps,Dry_Eyes,Vision_Loss,Scalp_Sensitivity,Jaw_Pain,Bleeding_Gums,Bulging_Eyes,";
//            qu = qu + "Bleeding_into_skin,Dry_Hair,Irritability,Poor_Muscle_Coordination,Seizure,Blindness,Deafness,";
//            qu = qu + "Atexia,Flatulence,Weight_Loss,Coughing_Blood,Skin_Yellowing,Itchiness,Pale_Stool,Urgency_to_pass_stool,";
//            qu = qu + "Dark_Urine,Runny_Nose,Sore_Throat,Fluid_Filled_Blisters,Unusual_Discharge,Lump_Thickening,Indigestion,";
//            qu = qu + "Bone_Pain,Change_in_bowel_movement,Blood_in_bowel,Mucus_in_bowel,Pain_while_defecating,";
              qu = qu + "Backpain from Disease_Symptom";//,Abdominal_Pain,Lymph_Node_Enlargement from Disease_Symptom;";
            rs = st.executeQuery(qu);
            Statement stmt1 = con.createStatement();
            ResultSet rs1 = stmt1.executeQuery("SELECT COUNT(*) AS total FROM Disease_Symptom;");
            int count = 0;
            while (rs1.next()) {
                count = rs1.getInt("total");
            }
            Statement stmt2 = con.createStatement();
            ResultSet rs2 = stmt2.executeQuery("SELECT Disease FROM Disease_Symptom;");
            String a = "";
            int nCol = rs.getMetaData().getColumnCount();
            double ar[][] = new double[count][nCol];
            //System.out.println(rowNumb);
            List<int[]> table = new ArrayList<>();
            while (rs.next()) {
                int[] row = new int[nCol];
                for (int iCol = 1; iCol <= nCol; iCol++) {
                    a = rs.getObject(iCol).toString();
                    row[iCol - 1] = Integer.parseInt(a);
                }
                table.add(row);
            }

            int nColy = rs2.getMetaData().getColumnCount();
            double ary[][] = new double[count][nColy];

            List<int[]> tabley = new ArrayList<>();
            while (rs2.next()) {
                int[] rowy = new int[nColy];
                for (int iCol = 1; iCol <= nColy; iCol++) {
                    a = rs2.getObject(iCol).toString();
                    rowy[iCol - 1] = Integer.parseInt(a);
                }
                tabley.add(rowy);
            }
            int i = 0;
            int j = 0;
            // print result
            for (int[] row : table) {
                for (int si : row) {
                    ar[i][j] = si;
                    j++;
                }
                j = 0;
                i++;

            }

            i = 0;
            j = 0;
            // print result
            for (int[] row : tabley) {
                for (int si : row) {
                    ary[i][j] = si;
                    j++;
                }
                j = 0;
                i++;
            }

            for (i = 0; i < count; i++) {
                for (j = 0; j < nCol; j++) {
                    System.out.print(ar[i][j] + "\t");
                }
                System.out.println();
            }
            for (i = 0; i < count; i++) {
                for (j = 0; j < nColy; j++) {
                    System.out.print(ary[i][j] + "\t");
                }
                System.out.println();
            }
            
            Matrix m = new Matrix(ar);
            Matrix m2 = new Matrix(ary);
            MultiLinear ml = new MultiLinear(m, m2);
            Matrix result = ml.calculate();
            for (int i1 = 0; i1 < result.getNrows(); i1++) {
                for (int j1 = 0; j1 < result.getNcols(); j1++) {
                    System.out.print(result.getValueAt(i1, j1));
                }
                System.out.println();
            }
            
            for(i=0;i<sym.length;i++)
            { 
                if(sym[i] == true)
                {
                    c++;
                }
            }
            String arrFinal[] = new String[c];
            j=0;
            for(i=0;i<sym.length;i++)
            {
                if(sym[i] == true)
                {
                    arrFinal[j] = arr[i];
                    j++;
                }
            }
            for(i=0;i<arrFinal.length;i++)
            {
                System.out.println(arrFinal[i]);
            }

        } catch (SQLException ex) {
            Logger.getLogger(Prediction.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSquareException ex) {
            Logger.getLogger(Prediction.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Predict_LabelMousePressed

    private void jCheckBox55ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox55ActionPerformed
        sym[0] = s1 = jCheckBox55.isEnabled();
        arr[0] = jCheckBox55.getText();
    }//GEN-LAST:event_jCheckBox55ActionPerformed

    private void jCheckBox56ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox56ActionPerformed
        sym[1] = s2 = jCheckBox56.isEnabled();
        arr[1] = jCheckBox56.getText();
    }//GEN-LAST:event_jCheckBox56ActionPerformed

    private void jCheckBox57ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox57ActionPerformed
        sym[2] = s3 = jCheckBox57.isEnabled();
        arr[2] = jCheckBox57.getText();
    }//GEN-LAST:event_jCheckBox57ActionPerformed

    private void jCheckBox58ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox58ActionPerformed
        sym[3] = s4 = jCheckBox58.isEnabled();
        arr[3] = jCheckBox58.getText();
    }//GEN-LAST:event_jCheckBox58ActionPerformed

    private void jCheckBox59ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox59ActionPerformed
        sym[4] = s5 = jCheckBox59.isEnabled();
        arr[4] = jCheckBox59.getText();
    }//GEN-LAST:event_jCheckBox59ActionPerformed

    private void jCheckBox60ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox60ActionPerformed
        sym[5] = s6 = jCheckBox60.isEnabled();
        arr[5] = jCheckBox60.getText();
    }//GEN-LAST:event_jCheckBox60ActionPerformed

    private void jCheckBox61ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox61ActionPerformed
        sym[6] = s7 = jCheckBox61.isEnabled();
        arr[6] = jCheckBox61.getText();
    }//GEN-LAST:event_jCheckBox61ActionPerformed

    private void jCheckBox62ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox62ActionPerformed
        sym[7] = s8 = jCheckBox62.isEnabled();
        arr[7] = jCheckBox62.getText();
    }//GEN-LAST:event_jCheckBox62ActionPerformed

    private void jCheckBox63ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox63ActionPerformed
        sym[8] = s9 = jCheckBox63.isEnabled();
        arr[8] = jCheckBox63.getText();
    }//GEN-LAST:event_jCheckBox63ActionPerformed

    private void jCheckBox64ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox64ActionPerformed
        sym[9] = s10 = jCheckBox64.isEnabled();
        arr[9] = jCheckBox64.getText();
    }//GEN-LAST:event_jCheckBox64ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Prediction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Prediction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Prediction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Prediction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Prediction().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Back_Label;
    private javax.swing.JLabel Img_Label;
    private javax.swing.JLabel Predict_Label;
    private javax.swing.JCheckBox jCheckBox55;
    private javax.swing.JCheckBox jCheckBox56;
    private javax.swing.JCheckBox jCheckBox57;
    private javax.swing.JCheckBox jCheckBox58;
    private javax.swing.JCheckBox jCheckBox59;
    private javax.swing.JCheckBox jCheckBox60;
    private javax.swing.JCheckBox jCheckBox61;
    private javax.swing.JCheckBox jCheckBox62;
    private javax.swing.JCheckBox jCheckBox63;
    private javax.swing.JCheckBox jCheckBox64;
    // End of variables declaration//GEN-END:variables
}
